/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.cryptography_project;

import java.awt.CardLayout;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;
import java.util.ArrayList;
import java.util.Base64;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.spec.IvParameterSpec;
import javax.swing.JOptionPane;

/**
 *
 * @author Aaron
 */
public class passwordManagerGui extends javax.swing.JFrame {
//    private ArrayList <password>  passwords ;
    private static final String PASSWORD_FILE = "password.txt";
    private static final String PASSWORD_MANAGE_FILE = "passwordManage.txt";
    private static final String passwordEncryptFile = "passwordManage.enc";
    private String masterPassword;
    /**
     * Creates new form passwordManagerGui
     */
    public passwordManagerGui() {
        initComponents();
//        passwords = new ArrayList<>();
        createMPasswordPanel.setVisible(true);
        mainPanel.setVisible(false);
        listBtn.setVisible(false);
        addBtn2.setVisible(true);
        JTFpasswordFor.setVisible(true);
        JTFpassword.setVisible(true);
        passwordForJLabel.setVisible(true);
        passwordJL.setVisible(true);
        deleteBtn.setVisible(false);
        
    }
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGroup1 = new javax.swing.ButtonGroup();
        Container = new javax.swing.JPanel();
        mainPanel = new javax.swing.JPanel();
        passwordForJLabel = new javax.swing.JLabel();
        JTFpasswordFor = new javax.swing.JTextField();
        passwordJL = new javax.swing.JLabel();
        JTFpassword = new javax.swing.JTextField();
        addRBtn = new javax.swing.JRadioButton();
        listRBtn = new javax.swing.JRadioButton();
        deleteRBtn = new javax.swing.JRadioButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        outputDisplay = new javax.swing.JTextArea();
        listBtn = new javax.swing.JButton();
        addBtn2 = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        logoutBtn = new javax.swing.JButton();
        createMPasswordPanel = new javax.swing.JPanel();
        createMPasswordLabel = new javax.swing.JLabel();
        masterPasswordTF = new javax.swing.JTextField();
        enterBtn = new javax.swing.JButton();
        ExitBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        masterPassTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(153, 255, 255));
        setName("mainContainer"); // NOI18N
        addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                formComponentAdded(evt);
            }
        });

        Container.setLayout(new java.awt.CardLayout());

        mainPanel.setBackground(new java.awt.Color(192, 222, 255));

        passwordForJLabel.setText("Password for:");

        JTFpasswordFor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JTFpasswordForActionPerformed(evt);
            }
        });

        passwordJL.setText("Password:");

        btnGroup1.add(addRBtn);
        addRBtn.setSelected(true);
        addRBtn.setText("Add password");
        addRBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRBtnActionPerformed(evt);
            }
        });

        btnGroup1.add(listRBtn);
        listRBtn.setText("List passwords");
        listRBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listRBtnActionPerformed(evt);
            }
        });

        btnGroup1.add(deleteRBtn);
        deleteRBtn.setText("Delete passwords");
        deleteRBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteRBtnActionPerformed(evt);
            }
        });

        outputDisplay.setEditable(false);
        outputDisplay.setColumns(20);
        outputDisplay.setRows(5);
        jScrollPane2.setViewportView(outputDisplay);

        listBtn.setText("List");
        listBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listBtnActionPerformed(evt);
            }
        });

        addBtn2.setText("Add");
        addBtn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtn2ActionPerformed(evt);
            }
        });

        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        logoutBtn.setText("Log out");
        logoutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(passwordJL, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passwordForJLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(JTFpasswordFor, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JTFpassword, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(addBtn2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(listBtn))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addRBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(listRBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteRBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(30, Short.MAX_VALUE))
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(logoutBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(JTFpassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(passwordJL))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(JTFpasswordFor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(passwordForJLabel))
                        .addGap(87, 87, 87)
                        .addComponent(logoutBtn)
                        .addGap(98, 98, 98))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(addRBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(listRBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteRBtn)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addBtn2)
                            .addComponent(deleteBtn)
                            .addComponent(listBtn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(144, 144, 144))))
        );

        Container.add(mainPanel, "card2");

        createMPasswordPanel.setBackground(new java.awt.Color(192, 222, 255));

        createMPasswordLabel.setText("ENTER MASTER PASSWORD");

        masterPasswordTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                masterPasswordTFActionPerformed(evt);
            }
        });

        enterBtn.setText("Enter");
        enterBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterBtnActionPerformed(evt);
            }
        });

        ExitBtn.setText("Exit");
        ExitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitBtnActionPerformed(evt);
            }
        });

        masterPassTextArea.setEditable(false);
        masterPassTextArea.setColumns(20);
        masterPassTextArea.setRows(5);
        jScrollPane1.setViewportView(masterPassTextArea);

        javax.swing.GroupLayout createMPasswordPanelLayout = new javax.swing.GroupLayout(createMPasswordPanel);
        createMPasswordPanel.setLayout(createMPasswordPanelLayout);
        createMPasswordPanelLayout.setHorizontalGroup(
            createMPasswordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(createMPasswordPanelLayout.createSequentialGroup()
                .addGroup(createMPasswordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(createMPasswordPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(ExitBtn))
                    .addGroup(createMPasswordPanelLayout.createSequentialGroup()
                        .addGap(239, 239, 239)
                        .addComponent(createMPasswordLabel)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(createMPasswordPanelLayout.createSequentialGroup()
                .addGap(210, 210, 210)
                .addGroup(createMPasswordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(createMPasswordPanelLayout.createSequentialGroup()
                        .addComponent(masterPasswordTF, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(enterBtn)))
                .addGap(0, 149, Short.MAX_VALUE))
        );
        createMPasswordPanelLayout.setVerticalGroup(
            createMPasswordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(createMPasswordPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ExitBtn)
                .addGap(21, 21, 21)
                .addComponent(createMPasswordLabel)
                .addGap(4, 4, 4)
                .addGroup(createMPasswordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(masterPasswordTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(enterBtn))
                .addGap(45, 45, 45)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(92, Short.MAX_VALUE))
        );

        Container.add(createMPasswordPanel, "card3");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(Container, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(Container, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addRBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRBtnActionPerformed
        // TODO add your handling code here:
        listBtn.setVisible(false);
        addBtn2.setVisible(true);
        deleteBtn.setVisible(false);
        JTFpasswordFor.setVisible(true);
        JTFpassword.setVisible(true);
        passwordForJLabel.setVisible(true);
        passwordJL.setVisible(true);
        outputDisplay.setText("");
    }//GEN-LAST:event_addRBtnActionPerformed

    private void deleteRBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteRBtnActionPerformed
        // TODO add your handling code here:
        listBtn.setVisible(false);
        addBtn2.setVisible(false);
        deleteBtn.setVisible(true);
        JTFpasswordFor.setVisible(true);
        JTFpassword.setVisible(true);
        passwordForJLabel.setVisible(true);
        passwordJL.setVisible(true);
        outputDisplay.setText("");
    }//GEN-LAST:event_deleteRBtnActionPerformed

    private void JTFpasswordForActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JTFpasswordForActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JTFpasswordForActionPerformed

    private void masterPasswordTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_masterPasswordTFActionPerformed
     
    }//GEN-LAST:event_masterPasswordTFActionPerformed

    private void enterBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterBtnActionPerformed
        try {
            // TODO add your handling code here:
            handleLogin();
        } catch (InvalidKeySpecException ex) {
            Logger.getLogger(passwordManagerGui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_enterBtnActionPerformed

    private void listRBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listRBtnActionPerformed
        // TODO add your handling code here:
        listBtn.setVisible(true);
        addBtn2.setVisible(false);
        deleteBtn.setVisible(false);
        JTFpasswordFor.setVisible(false);
        JTFpassword.setVisible(false);
        passwordForJLabel.setVisible(false);
        passwordJL.setVisible(false);
        outputDisplay.setText("");
    }//GEN-LAST:event_listRBtnActionPerformed

    private void addBtn2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtn2ActionPerformed
        // TODO add your handling code here:
        
        String passwordFor=JTFpasswordFor.getText();
        String password = JTFpassword.getText();   
        
        if((passwordFor.length()==0) || (password.length()==0)){
            outputDisplay.append("");
            outputDisplay.append("both fields must be entered!");
            
        }else{
            createPasswordFile();
            saveToFile(password, passwordFor);
            outputDisplay.append("Password added succesfully! \n");
            JTFpasswordFor.setText(""); 
            JTFpassword.setText("");

         }
        
    }//GEN-LAST:event_addBtn2ActionPerformed

    private boolean passwordManageFileExists(){
        File file = new File(PASSWORD_MANAGE_FILE);
        return file.exists();
    }
     
    private void saveToFile(String password, String passwordFor){
        try(FileWriter writer = new FileWriter(PASSWORD_MANAGE_FILE, true)){
            writer.write(password+" : "+ passwordFor + "\n");
        }catch (IOException ex) {
            Logger.getLogger(passwordManagerGui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
     
//making function to check if user already has files and if not its creates them   
private void createPasswordFile() {
    try {
       
        File passwordFile = new File(PASSWORD_MANAGE_FILE);
        File encryptedFile = new File(passwordEncryptFile);
        
        if (!passwordFile.exists()) {
          
            passwordFile.createNewFile();
            
            if(!encryptedFile.exists()){
                encryptedFile.createNewFile();
            }
            
            try (FileWriter writer = new FileWriter(passwordFile)) {
                writer.write("");
            }
        }
    } catch (IOException e) {
        e.printStackTrace();
    }
}
     
    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        // TODO add your handling code here:
        //instead of actually deleting the inputted password from the file,
        //i found that it would be easier to copy and paste all the passwords 
        //that didnt match to a new file mimick the function of deleting
        
        String passwordFor=JTFpasswordFor.getText().trim();
        String password=JTFpassword.getText().trim();
        
        File originalFile = new File(PASSWORD_MANAGE_FILE);
        File tempFile = new File("tempFile.txt");
        
        try(BufferedReader reader = new BufferedReader(new FileReader(PASSWORD_MANAGE_FILE));
            BufferedWriter writer= new BufferedWriter(new FileWriter("tempFile.txt"))){
            String passwordDetails;
            boolean found = false;
                while((passwordDetails=reader.readLine())!=null){
            

                String[] parts = passwordDetails.split(":");
                String savedPasswordFor = parts[1].trim();
                String savedPassword = parts[0].trim();
                if((savedPasswordFor.equals(passwordFor))&&(savedPassword.equals(password))){
                    found = true;
                    continue;
                }
                else{
                    writer.write(passwordDetails);
                    writer.newLine();
                    }
                } 
                if(found){
                    outputDisplay.append("");
                    outputDisplay.append("Password has been deleted! \n");
                }else{
                    outputDisplay.append("");
                    outputDisplay.append("Password wasnt found! \n");
                }
          
        } catch (FileNotFoundException ex) {
            Logger.getLogger(passwordManagerGui.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(passwordManagerGui.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        if(originalFile.delete()){
            tempFile.renameTo(originalFile);
        }
        
        JTFpasswordFor.setText("");
        JTFpassword.setText("");
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void listBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listBtnActionPerformed
        // TODO add your handling code here:
        try(BufferedReader reader = new BufferedReader(new FileReader(PASSWORD_MANAGE_FILE))){
            String line;
            
            StringBuilder content = new StringBuilder();
            
            while((line=reader.readLine())!=null){
                content.append(line).append("\n");
            }
            
            if(content.length()==0){
                outputDisplay.setText("There is currently no passwords to display \n");
            }else{
            outputDisplay.setText(content.toString());
            }  
        } catch (IOException ex) {
            Logger.getLogger(passwordManagerGui.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_listBtnActionPerformed

    private void logoutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutBtnActionPerformed
        // TODO add your handling code here:
            //encrypting file when user logs out making passwords secure, if user doesnt press log out button file wont be
            //encrypted which is a potential security concern
          
             encryptFile();
            new Dashboard().setVisible(true);
             dispose();
    }//GEN-LAST:event_logoutBtnActionPerformed

    private void ExitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitBtnActionPerformed
        // TODO add your handling code here:
        dispose();
        new Dashboard().setVisible(true);
    }//GEN-LAST:event_ExitBtnActionPerformed

    private void formComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_formComponentAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_formComponentAdded
    private void encryptFile(){
                    File inputFile = new File(PASSWORD_MANAGE_FILE); 
                    File outputFile = new File(passwordEncryptFile); 

                    //getting the salt to generate the mtaching key from password
                    try(BufferedReader reader = new BufferedReader(new FileReader(PASSWORD_FILE))){
                    String savedPassword = reader.readLine();
                    String[] parts = savedPassword.split(":");
                    String storedSalts=parts[0];
                    SecretKey key=passwordEncrypt.getKeyFromPassword(masterPassword, storedSalts);
                    IvParameterSpec iv=passwordEncrypt.generateIv();
                    passwordEncrypt.encryptFile("AES/CBC/PKCS5Padding", key, iv, inputFile, outputFile);

                    //deleting the decrypted version for security although overwriting the data would be better
                    inputFile.delete();
                    }catch(IOException e){
                        e.printStackTrace();
                       
                    
            } catch (NoSuchAlgorithmException ex) {
                Logger.getLogger(passwordManagerGui.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InvalidKeySpecException ex) {
                Logger.getLogger(passwordManagerGui.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NoSuchPaddingException ex) {
                Logger.getLogger(passwordManagerGui.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InvalidAlgorithmParameterException ex) {
                Logger.getLogger(passwordManagerGui.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InvalidKeyException ex) {
                Logger.getLogger(passwordManagerGui.class.getName()).log(Level.SEVERE, null, ex);
            } catch (BadPaddingException ex) {
                Logger.getLogger(passwordManagerGui.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IllegalBlockSizeException ex) {
                Logger.getLogger(passwordManagerGui.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(passwordManagerGui.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
    
  
    
    private void handleLogin() throws InvalidKeySpecException {
           masterPassword = masterPasswordTF.getText();
         
           //prompting user to make a hard to guess password for added security
  if((masterPassword.length()<8)||(masterPassword.length()>20)){
            masterPassTextArea.setText("");
            masterPassTextArea.append("Invalid password, between 8 - 20 characters");
        }else{
            if(passwordFileExists()){
                try {
                    if(passwordValidate(masterPassword)){
                        JOptionPane.showMessageDialog(this, "Login successful!", "Success", JOptionPane.INFORMATION_MESSAGE);
                        showMainPanel();
                        CardLayout cardLayout = (CardLayout) Container.getLayout();
                        cardLayout.show(Container, "mainPanel");

                        try(BufferedReader reader = new BufferedReader(new FileReader(PASSWORD_FILE))){
                             
                        String savedPassword = reader.readLine();
                        String[] parts = savedPassword.split(":");
                        String storedSalts=parts[0];
                        SecretKey key=passwordEncrypt.getKeyFromPassword(masterPassword, storedSalts);

                        File inputFile = new File("passwordManage.enc");
                        File outputFile = new File("passwordManage.txt");
                        //decrypting the file on login to create a seamless experience for the user
                        //ecrypts when user logs out
                        passwordEncrypt.decryptFile("AES/CBC/PKCS5Padding", key, inputFile, outputFile);
                        }
                    }else{
                        JOptionPane.showMessageDialog(this, "Incorrect password!", "Error", JOptionPane.ERROR_MESSAGE);   
                    }
                }catch (Exception ex) {
                    Logger.getLogger(passwordManagerGui.class.getName()).log(Level.SEVERE, null, ex);
                }
            }else{
                //if password file does not exist it prompts the user to set this as there password as this is the first time 
                //using the app
                int result = JOptionPane.showConfirmDialog(this, "No password set. Do you want to set this password?", "Set Password", JOptionPane.YES_NO_OPTION);
                if(result==JOptionPane.YES_OPTION){
                    try {
                        savePassword(masterPassword);
                    } catch (Exception ex) {
                        Logger.getLogger(passwordManagerGui.class.getName()).log(Level.SEVERE, null, ex);
                    }
                     JOptionPane.showMessageDialog(this, "Password set successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                    showMainPanel();
                }
            }
        }
    }
    
    private boolean passwordFileExists(){
        File file = new File(PASSWORD_FILE);
        return file.exists();
    }
    
    private void savePassword(String password) throws NoSuchAlgorithmException, InvalidKeySpecException, Exception{
        byte[] salt = passwordEncrypt.generateRandomSalt(16);
        String hashedPassword = passwordEncrypt.hashPassword(password, salt);

        String saltString =Base64.getEncoder().encodeToString(salt);
        try(FileWriter writer = new FileWriter(PASSWORD_FILE)){
        writer.write(saltString +" : "+hashedPassword);
        }catch(IOException e){
           e.printStackTrace();
        }   
    }
    //hashing the input password with the saved salt to see if they match
    private boolean passwordValidate(String inputPassword) throws NoSuchAlgorithmException, InvalidKeySpecException, Exception{
        try(BufferedReader reader = new BufferedReader(new FileReader(PASSWORD_FILE))){
            String savedPassword = reader.readLine();
            String[] parts = savedPassword.split(":");
            String storedSalts=parts[0].trim();
            String storedPassword = parts[1].trim();
            byte[] storedSaltsByte=Base64.getDecoder().decode(storedSalts);
            String hashedPassword = passwordEncrypt.hashPassword(inputPassword, storedSaltsByte);

            
            return hashedPassword.equals(storedPassword);
        }catch(IOException e){
            e.printStackTrace();
            return false;
        }
    }
    
    private void showMainPanel(){
        createMPasswordPanel.setVisible(false);
        mainPanel.setVisible(true);
        revalidate();
        repaint();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(passwordManagerGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(passwordManagerGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(passwordManagerGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(passwordManagerGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new passwordManagerGui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Container;
    private javax.swing.JButton ExitBtn;
    private javax.swing.JTextField JTFpassword;
    private javax.swing.JTextField JTFpasswordFor;
    private javax.swing.JButton addBtn2;
    private javax.swing.JRadioButton addRBtn;
    private javax.swing.ButtonGroup btnGroup1;
    private javax.swing.JLabel createMPasswordLabel;
    private javax.swing.JPanel createMPasswordPanel;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JRadioButton deleteRBtn;
    private javax.swing.JButton enterBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton listBtn;
    private javax.swing.JRadioButton listRBtn;
    private javax.swing.JButton logoutBtn;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JTextArea masterPassTextArea;
    private javax.swing.JTextField masterPasswordTF;
    private javax.swing.JTextArea outputDisplay;
    private javax.swing.JLabel passwordForJLabel;
    private javax.swing.JLabel passwordJL;
    // End of variables declaration//GEN-END:variables
}
